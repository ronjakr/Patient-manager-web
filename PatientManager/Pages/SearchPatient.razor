@page "/search-patient"
@using PatientManager.Services
@using PatientManager.Models
@inject PatientService patientService

<h3>Search for Patient by ID or Name</h3>
<p> </p>

<p>Search for pasient by entering pasient's ID</p>
<input type="number" @bind="searchId" placeholder="Patient ID"/>
<button style="margin-bottom: 30px;" @onclick="SearchById">Search</button>

<p>Search for pasient by entering pasient's name</p>
<input type="string" @bind="searchName" placeholder="Patient Name"/>
<button style="margin-bottom: 30px;" @onclick="SearchByName">Search</button>

<p> </p>
<button @onclick="ClearSearch">Clear Search</button>


@if (isFound)
{
    <h4>Search Result:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Patient ID</th>
                <th>Name</th>
                <th>Date of Birth</th>
                <th>Age</th>
                <th>Conditions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@searchedPatient.Id</td>
                <td>@searchedPatient.Name</td>
                <p>Date of Birth: @searchedPatient.DateOfBirth.ToString("dd/MM/yyyy")</p>
                <td>@patientService.CalculateAge(searchedPatient.DateOfBirth)</td>
                <td>@string.Join(", ", searchedPatient.Conditions)</td>
            </tr>
        </tbody>
    </table>
    
}
else if (isFailed)
{
    <p style="color: red;">No patient found matching your search.</p>
}
else if (isInvalidName)
{
    <p style="color: red;">Invalid name format. Please enter a valid name (letters and spaces only).</p>
}

@code {
    private string searchName = string.Empty;
    private int? searchId = null;
    private Patient searchedPatient = null;
    private bool isInvalidName = false;

    private bool isFound = false;
    private bool isFailed = false;


    // Search for a patient by name or ID
    private void SearchById()
    {
        // do nothing if button is clicked without providing id
        if (!searchId.HasValue)
        {
            return;
        }

        var patient = patientService.GetPatientById(searchId.Value);
        if (patient != null)
        {
            searchedPatient = patient;
            isFound = true;
        }
        else    // patient does not exist
        {
            isFailed = true;
        }

    }

    private void SearchByName()
    {
        // do nothing if button is clicked without providing id
        if (string.IsNullOrEmpty(searchName))
        {
            return;
        }
        if (!IsValidName(searchName))
        {
            isInvalidName = true;
            return;
        }

        var patient = patientService.GetPatientByName(searchName);
        if (patient != null)
        {
            searchedPatient = patient;
            isFound = true;
        }
        else    // patient does not exist
        {
            isFailed = true;
        }
    }

    private void ClearSearch()
    {
        searchId = null;
        searchName = string.Empty;
        searchedPatient = null;
        isFound = false;
        isFailed = false;
        isInvalidName = false;

    }

    private bool IsValidName(string name)
    {
        // Regular expression to allow only letters and spaces
        var regex = new System.Text.RegularExpressions.Regex("^[\\p{L} ]*$");
        return regex.IsMatch(name);
    }

}