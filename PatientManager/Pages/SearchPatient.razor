@page "/search-patient"
@using PatientManager.Services
@using PatientManager.Models
@inject PatientService patientService

<h3>Search for Patient by ID or Name</h3>
<p> </p>

<div class="search-container"> 
    <div class="search-item mb-5">
        <p>Search for pasient by entering pasient's ID</p>
        <input type="number" @bind="searchId" placeholder="ID"/>
        <button type="submit" @onclick="SearchById">Search</button>
    </div>

    <div class="search-item mb-5">
        <p>Search for pasient by entering pasient's name</p>
        <input type="string" @bind="searchName" placeholder="Name"/>
        <button type="submit" @onclick="SearchByName">Search</button>
    </div>

    <div class="search-item mb-5">
        <button type="submit" @onclick="ClearSearch">Clear Search</button>
    </div>
</div>

@if (isFound)
{
    <h4>Search Result:</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Patient ID</th>
                <th>Name</th>
                <th>Date of Birth</th>
                <th>Age</th>
                <th>Conditions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@searchedPatient.Id</td>
                <td>@searchedPatient.Name</td>
                <p>Date of Birth: @searchedPatient.DateOfBirth.ToString("dd/MM/yyyy")</p>
                <td>@patientService.CalculateAge(searchedPatient.DateOfBirth)</td>
                <td>@string.Join(", ", searchedPatient.Conditions)</td>
            </tr>
        </tbody>
    </table>

    <div class="mt-5">
        <h5>Add/delete Conditions</h5>
        <div class="mb-3">
            <input type="text" class="form-control mb-3" @bind="conditionsInput" placeholder="Enter conditions" />

            <button @onclick="AddConditions">Add Conditions</button>
            <button @onclick="DeleteConditions">Delete Conditions</button>
        </div>

        <!-- Display current conditions -->
        @if(isUpdated)
        {
            <div class="mt-3">
                <h6>Conditions updated to:</h6>
                <ul>
                    @foreach (var condition in searchedPatient.Conditions)
                    {
                        <li>@condition</li>
                    }
                </ul>
            </div>
        }
    </div>    
}
else if (isFailed)
{
    <p style="color: red;">No patient found matching your search.</p>
}
else if (isInvalidName)
{
    <p style="color: red;">Invalid name format. Please enter a valid name (letters and spaces only).</p>
}

@code {
    private string searchName = string.Empty;
    private int? searchId = null;
    private Patient searchedPatient = null;
    private bool isInvalidName = false;

    private bool isFound = false;
    private bool isFailed = false;

    private string conditionsInput = string.Empty;
    private bool isUpdated = false;


    private void SearchById()
    {
        // do nothing if button is clicked without providing id
        if (!searchId.HasValue)
        {
            return;
        }

        var patient = patientService.GetPatientById(searchId.Value);
        if (patient != null)
        {
            searchedPatient = patient;
            isFound = true;
            searchName = string.Empty;
        }
        else    // patient does not exist
        {
            isFailed = true;
        }

    }

    private void SearchByName()
    {
        // do nothing if button is clicked without providing id
        if (string.IsNullOrEmpty(searchName))
        {
            return;
        }
        if (!IsValidName(searchName))
        {
            isInvalidName = true;
            return;
        }

        var patient = patientService.GetPatientByName(searchName);
        if (patient != null)
        {
            searchedPatient = patient;
            isFound = true;
            searchId = null;
        }
        else    // patient does not exist
        {
            isFailed = true;
        }
    }

    private void ClearSearch()
    {
        searchId = null;
        searchName = string.Empty;
        searchedPatient = null;
        isFound = false;
        isFailed = false;
        isInvalidName = false;

    }

    private bool IsValidName(string name)
    {
        // Regular expression to allow only letters and spaces
        var regex = new System.Text.RegularExpressions.Regex("^[\\p{L} ]*$");
        return regex.IsMatch(name);
    }

    private void AddConditions()
    {
        if (string.IsNullOrEmpty(conditionsInput))
        {
            return; // do nothing if no condition is entered
        }

        // add new conditions
        var newConditions = conditionsInput
                            .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                            .Select(c => c.Trim())  // Trim spaces around each condition
                            .Where(c => !searchedPatient.Conditions.Contains(c)) // Avoid adding duplicates
                            .ToList();

        searchedPatient.Conditions.AddRange(newConditions);

        // clear input field
        conditionsInput = string.Empty;
        isUpdated = true;
    }

    private void DeleteConditions()
    {
        if (string.IsNullOrEmpty(conditionsInput))
        {
            return; // do nothing if no condition is entered
        }

        // remove condition
        searchedPatient.Conditions.Remove(conditionsInput.Trim());

        // clear input field
        conditionsInput = string.Empty;
        isUpdated = true;
    }

}